<?php

/**
 * @file
 * Module hooks and functions for the Entity XLIFF module.
 */

use EggsCereal\Serializer;
use EntityXliff\Drupal\Factories\EntityTranslatableFactory;


/**
 * Takes an Entity API wrapped entity and returns XLIFF XML data that represents
 * it. This data can be used by localization software, a TMS, or a text editor
 * to edit translations of this entity.
 *
 * @param \EntityDrupalWrapper $wrapper
 *   The entity metadata wrapper for which you want an XLIFF.
 *
 * @param string $targetLanguage
 *   Target language you want the XLIFF to represent. Should be the Drupal
 *   language code.
 *
 * @return string
 *   XLIFF XML data representing the given entity. If the given entity isn't
 *   translatable, an empty string is returned.
 */
function entity_xliff_get_xliff($wrapper, $targetLanguage) {
  $xliff = '';

  if ($translatable = entity_xliff_get_translatable($wrapper)) {
    $serializer = entity_xliff_get_serializer($translatable->getSourceLanguage());
    $xliff = $serializer->serialize($translatable, $targetLanguage);
    drupal_alter('entity_xliff_get_xliff', $xliff, $wrapper, $targetLanguage);
  }

  return $xliff;
}

/**
 * Takes XLIFF data representing an entity and creates the translation that it
 * represents.
 *
 * @param \EntityDrupalWrapper $wrapper
 *   The entity metadata wrapper of the entity for whose translation you're
 *   importing.
 *
 * @param string $targetLanguage
 *   Target language the XLIFF represents. Should be a Drupal language code.
 *
 * @param string $xliff
 *   A string of the XLIFF XML.
 *
 * @param bool $save
 *   (Optional) Whether or not to actually set and save the underlying data to
 *   the database. Defaults to TRUE.
 *
 * @return array
 *   An associative array representing the translation data. If the returned
 *   array is empty, it means the XLIFF unserialization process failed.
 */
function entity_xliff_set_xliff($wrapper, $targetLanguage, $xliff, $save = TRUE) {
  $data = array();

  if ($translatable = entity_xliff_get_translatable($wrapper)) {
    $serializer = entity_xliff_get_serializer($translatable->getSourceLanguage());
    drupal_alter('entity_xliff_set_xliff', $xliff, $wrapper, $targetLanguage);
    $data = $serializer->unserialize($translatable, $targetLanguage, $xliff, $save);
  }

  return $data;
}

/**
 * Implements hook_menu().
 */
function entity_xliff_menu() {
  $allInfo = entity_get_info();
  $menu = array();

  // Iterate through known translatable entities.
  foreach (_entity_xliff_get_translatable_info() as $entity => $transInfo) {
    // Easy access to entity info for this entity.
    $entityInfo = $allInfo[$entity];

    // Only add menu items for known paths.
    if (isset($entityInfo['path'])) {
      $ourPath = $entityInfo['path'] . '/xliff';
      $argPart = count(explode('/', $ourPath)) - 2;

      // Local action to import/export an entity via XLIFF.
      $menu[$ourPath] = array(
        'title' => 'XLIFF',
        'type' => MENU_LOCAL_TASK,
        'file' => 'entity_xliff.admin.inc',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('entity_xliff_actions', $entity, $argPart),
        'access arguments' => array('administer entity xliff'),
        'weight' => 10,
      );

      // Callback to render an entity as an XLIFF file.
      $entityLabel = isset($entityInfo['label']) ? $entityInfo['label'] : 'Entity';
      $menu[$entityInfo['path'] . '/as.xlf'] = array(
        'title' =>  $entityLabel . ' XLIFF',
        'type' => MENU_CALLBACK,
        'file' => 'entity_xliff.pages.inc',
        'delivery callback' => 'entity_xliff_deliver_xlf',
        'page callback' => 'entity_xliff_to_xlf',
        'page arguments' => array($entity, $argPart),
        'access arguments' => array('administer entity xliff'),
      );
    }
  }

  return $menu;
}

/**
 * Implements hook_permission().
 */
function entity_xliff_permission() {
  return array(
    'administer entity xliff' => array(
      'title' => t('Administer Entity XLIFF'),
      'description' => t('Import and export any entity via XLIFF. Note: this includes entities to which a user may not have otherwise had access.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_entity_info_alter().
 */
function entity_xliff_entity_info_alter(&$entityInfo) {
  foreach (_entity_xliff_get_translatable_info() as $type => $info) {
    if (isset($entityInfo[$type]) && isset($info['classes'])) {
      $entityInfo[$type]['entity xliff translatable classes'] = $info['classes'];
    }
  }

  // Provide "path" keys for known entity types.
  $entityInfo['user']['path'] = 'user/%user';
  if (module_exists('node')) {
    $entityInfo['node']['path'] = 'node/%node';
  }
  if (module_exists('taxonomy')) {
    $entityInfo['taxonomy_term']['path'] = 'taxonomy/term/%taxonomy_term';
  }
  if (module_exists('comment')) {
    $entityInfo['comment']['path'] = 'comment/%comment';
  }
}

/**
 * Gets a TranslatableInterface instance given an entity wrapper.
 *
 * @param \EntityDrupalWrapper $wrapper
 *   Used when instantiating the translatable.
 *
 * @return EntityXliff\Drupal\Interfaces\EntityTranslatableInterface|null
 *   Returns a translatable object compatible with Eggs'n'Cereal's Translatable
 *   interface. If none is known, NULL is returned.
 */
function entity_xliff_get_translatable($wrapper) {
  return EntityTranslatableFactory::getInstance()->getTranslatable($wrapper);
}

/**
 * Gets an EggsCereal\Serializer instance, set up to serialize and unserialize
 * data with the provided source language.
 *
 * @param string $sourceLanguage
 *   Language code representing the source language for documents to be either
 *   serialized or validated during unserialization.
 *
 * @return Serializer
 *   A configured instance of an XLIFF serializer.
 */
function entity_xliff_get_serializer($sourceLanguage) {
  composer_manager_register_autoloader();
  $serializer = new Serializer($sourceLanguage);
  if (module_exists('psr3_watchdog')) {
    $logger = new Psr3Watchdog();
    $serializer->setLogger($logger);
  }
  return $serializer;
}

/**
 * Returns entity xliff field handlers declared by installed Drupal modules.
 *
 * @return array
 * @see EntityXliff\Drupal\Mediator\FieldMediator::buildMap()
 */
function entity_xliff_get_field_handlers() {
  // Load our provided default implementations.
  _entity_xliff_load_module_incs();

  // Return a list of field handlers (classes) keyed by entity property type.
  $handlers = module_invoke_all('entity_xliff_field_handler_info');
  drupal_alter('entity_xliff_field_handler_info', $handlers);

  return $handlers;
}

/**
 * Loads in includes provided on behalf of existing modules.
 */
function _entity_xliff_load_module_incs() {
  static $loaded = FALSE;

  // This may be called many times per request. Reduce overhead w/static flag.
  if (!$loaded) {
    // This potentially runs before hook_init(), so register auto-loader now.
    composer_manager_register_autoloader();
    foreach (_entity_xliff_modules_with_includes() as $module) {
      module_load_include('inc', 'entity_xliff', 'modules/' . $module . '.entity_xliff');
    }

    $loaded = TRUE;
  }
}

/**
 * An array of modules on behalf of which we provide hook implementations.
 */
function _entity_xliff_modules_with_includes() {
  return array(
    'translation',
    'entity_translation',
    'link',
    'image',
    'text',
    'number',
    'list',
    'field_collection',
    'auto_nodetitle',
    'auto_entitylabel',
    'paragraphs_i18n',
    'workbench_moderation',
  );
}

/**
 * Returns an associative array of translatable info, keyed by entity.
 *
 * @return array
 */
function _entity_xliff_get_translatable_info() {
  // During install, prior to composer (re-)creating the auto-loader, this class
  // is unavailable. This check ensures Drupal is able to install the module,
  // thus allowing composer manager to create the auto loader with our classes.
  composer_manager_register_autoloader();
  if (!class_exists('EntityXliff\Drupal\Factories\EntityTranslatableFactory')) {
    return array();
  }

  // Load our provided default implementations.
  _entity_xliff_load_module_incs();

  // Return a list of translatable info (classes) keyed by entity type.
  $translatables = module_invoke_all('entity_xliff_translatable_info');
  drupal_alter('entity_xliff_translatable_info', $translatables);
  return $translatables;
}
