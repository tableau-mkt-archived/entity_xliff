<?php

/**
 * @file
 * Module hooks and functions for the Entity XLIFF module.
 */

use EntityXliff\Drupal\Mediator\EntityMediator;

/**
 * Implements hook_menu().
 *
 * Currently, only node serialization/unserialization is supported.
 * @todo Support all types of entities.
 */
function entity_xliff_menu() {
  // Local action to import/export a node via XLIFF.
  $menu['node/%node/xliff'] = array(
    'title' => 'XLIFF',
    'type' => MENU_LOCAL_TASK,
    'file' => 'entity_xliff.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('entity_xliff_actions', 'node', 1),
    'access arguments' => array('administer entity xliff'),
    'weight' => 10,
  );

  // Callback to render a node as an XLIFF file.
  $menu['node/%node/as.xlf'] = array(
    'title' => 'Node XLIFF',
    'type' => MENU_CALLBACK,
    'file' => 'entity_xliff.pages.inc',
    'delivery callback' => 'entity_xliff_deliver_xlf',
    'page callback' => 'entity_xliff_to_xlf',
    'page arguments' => array('node', 1),
    'access arguments' => array('administer entity xliff'),
  );

  return $menu;
}

/**
 * Implements hook_permission().
 */
function entity_xliff_permission() {
  return array(
    'administer entity xliff' => array(
      'title' => t('Administer Entity XLIFF'),
      'description' => t('Import and export any entity via XLIFF. Note: this includes entities to which a user may not have otherwise had access.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_entity_info_alter().
 */
function entity_xliff_entity_info_alter(&$entityInfo) {
  // Load our provided default implementations.
  _entity_xliff_load_provided_incs();

  // Return a list of translatable info (classes) keyed by entity type.
  $translatables = module_invoke_all('entity_xliff_translatable_info');
  drupal_alter('entity_xliff_translatable_info', $translatables);

  foreach ($translatables as $type => $info) {
    if (isset($entityInfo[$type]) && isset($info['class'])) {
      $entityInfo[$type]['entity xliff translatable class'] = $info['class'];
    }
  }
}

/**
 * Gets a TranslatableInterface instance given an entity wrapper.
 *
 * @param \EntityDrupalWrapper $wrapper
 *   Used when instantiating the translatable.
 *
 * @return EggsCereal\Interfaces\TranslatableInterface|null
 *   Returns a translatable object compatible with Eggs'n'Cereal's Translatable
 *   interface. If none is known, NULL is returned.
 */
function entity_xliff_get_translatable($wrapper) {
  $entityMediator = &drupal_static(__FUNCTION__, FALSE);
  if ($entityMediator === FALSE) {
    $entityMediator = new EntityMediator();
  }
  return $entityMediator->getTranslatable($wrapper);
}

/**
 * Loads in includes provided on behalf of existing modules.
 */
function _entity_xliff_load_provided_incs() {
  foreach (array('node', 'field_collection') as $entity) {
    module_load_include('inc', 'entity_xliff', 'modules/' . $entity . '.entity_xliff');
  }
}
